// Fashion MNIST clothes
var FMNIST = [];

// size of the sample images (28 x 28)
var size = 28;

// raw data
var raw = [
	require('./clothes/0.json').data,
	require('./clothes/1.json').data,
	require('./clothes/2.json').data,
	require('./clothes/3.json').data,
	require('./clothes/4.json').data,
	require('./clothes/5.json').data,
	require('./clothes/6.json').data,
	require('./clothes/7.json').data,
	require('./clothes/8.json').data,
	require('./clothes/9.json').data
];

[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(id => {
	// fashion mnist cloth
	var cloth = {
		id,
		
		// raw data
		raw: raw[id]
	};
	
	// number of samples
	cloth.length = cloth.raw.length / (size * size) | 0;
	
	// get one sample
	cloth.get = _which => {
		var which = _which;
		// if not specified, or if invalid, pick a random sample
		if(typeof which === 'undefined' || which > cloth.length || which < 0)
			which = Math.random() * cloth.length | 0;
		
		// generate sample
		return cloth.raw[which];
	};
	
	// get a range of samples
	cloth.range = (start, end) => {
		if(start < 0)
			start = 0;
		if(end >= cloth.length)
			end = cloth.length - 1;
		if(start > end){
			var tmp = start;
			start = end;
			end = tmp;
		}
		var range = [];
		for(var i = start;
			i <= end;
			range.push(cloth.get(i++))
		);
		return range;
	};
	
	// get set of clothes, ready to be used for training or testing
	cloth.set = (start, end) => {
		var _set = [];
		var output = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
		output[cloth.id] = 1;
		var range = cloth.range(start, end);
		for(var i = 0;
			i < range.length;
			_set.push({
				input: range[i++],
				output
			})
		);
		return _set;
	};

	// add mnist cloth
	FMNIST.push(cloth);
});

// Generates non-overlaping training and a test sets, with the desired ammount of samples
FMNIST.get = count => {
	var range = [];
	
	for(var i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
		range = range.concat(
			this[i].set(0, this[i].length)
		);
	
	range = shuffle(range);
	
	if(Number(count))
		range = range.slice(0, Number(count));
	
	return range;
};


// Generates non-overlaping training and a test sets, with the desired ammount of samples
FMNIST.set = (_training, _test) => {
	var training = _training / 10 | 0;
	var test = _test / 10 | 0;
	
	if(training < 1)
		training = 1;
	if(test < 1)
		test = 1;
	
	// check that there are enough samples to make the sets, and change the ammounts if they are too big
	if(training + test + 1 > FMNIST.__MINLENGTH){
		console.warn(`There are not enough samples to make a training set of ${training} elements and a test set of ${test} elements.`);
		if(training > test){
			test = FMNIST.__MINLENGTH * (test / training);
			training = FMNIST.__MINLENGTH - training;
		}else{
			training = FMNIST.__MINLENGTH * (training / test);
			test = FMNIST.__MINLENGTH - test;
		}
	}
	// make both sets
	var trainingSet = [];
	var testSet = [];
	
	for(var i = 0; i < 10; i++){
		trainingSet = trainingSet.concat(FMNIST[i].set(0, training - 1));
		testSet = testSet.concat(FMNIST[i].set(training, training + test - 1));
	}
	
	// return the sets, shuffled
	return {
		training: shuffle(trainingSet),
		test: shuffle(testSet)
	};
};

// draws a given cloth in a canvas context
FMNIST.draw = (cloth, context, offsetX, offsetY) => {
	var imageData = context.getImageData(offsetX || 0, offsetY || 0, size, size);
	for(var i = 0, j, k; i < cloth.length; i++){
		j <<= 2, k = cloth[i] * 255;
		imageData.data[  j  ] = k;
		imageData.data[j + 1] = k;
		imageData.data[j + 2] = k;
		imageData.data[j + 3] = 255;
	}
	context.putImageData(imageData, offsetX || 0, offsetY || 0);
};

// takes an array of 10 clothes representing a number from 0 to 9 (ie. any output in a dataset) and returns the actual number
FMNIST.toNumber = array => {
	return array.indexOf( Math.max.apply(Math, array) );
};

try{
	// CommonJS & AMD
	if(typeof define !== 'undefined' && define.amd)
		define([], function () { return FMNIST });
}catch(e){}
try{
	// Node.js
	if (typeof module !== 'undefined' && module.exports)
		module.exports = FMNIST;
}catch(e){}

try{
	// Browser
	if(typeof window == 'object'){
		(() => {
			var old = window['fmnist'];
			FMNIST.ninja = () => {
				window['fmnist'] = old;
				return FMNIST;
			};
		})();

		window['fmnist'] = FMNIST;
	}
}catch(e){}

//+ Jonas Raoni Soares Silva
//@ http://jsfromhell.com/array/shuffle [rev. #1]

function shuffle(v){
	for(var j, x, i = v.length;
		i;
		j = parseInt(Math.random() * i),
		x = v[--i],
		v[i] = v[j],
		v[j] = x
	);
	return v;
}